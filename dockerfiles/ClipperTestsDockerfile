ARG CODE_VERSION
FROM maven:latest

# install docker
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install --fix-missing -y \
      wget apt-transport-https ca-certificates curl software-properties-common \
      openjdk-8-jdk clang-format \
      && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - \
      && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
      && apt-get update \
      && apt-get install -y docker-ce

RUN echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh \
    && wget --quiet 'https://repo.continuum.io/archive/Anaconda2-4.2.0-Linux-x86_64.sh' -O /tmp/anaconda.sh \
    && /bin/bash /tmp/anaconda.sh -b -p /opt/conda \
    && rm /tmp/anaconda.sh
ENV PATH "/opt/conda/bin:$PATH"
RUN conda install -y libgcc pyzmq
 
RUN pip install requests subprocess32 scikit-learn numpy pyyaml docker kubernetes pyspark

ENV JZMQ_HOME /usr/local/lib/

# Install kubectl
RUN curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl \
      && chmod +x kubectl \
      && mv kubectl /usr/local/bin/

# Install R
RUN echo "deb http://cran.rstudio.com/bin/linux/ubuntu xenial/" >> /etc/apt/sources.list \
      && gpg --keyserver keyserver.ubuntu.com --recv-key E084DAB9 \
      && gpg -a --export E084DAB9 | apt-key add - \
      && apt-get update && apt-get install -y r-base

RUN R -e "install.packages('versions', repos='http://cran.us.r-project.org')" \
    && R -e "versions::install.versions('jsonlite', version='1.5')" \
    && R -e "versions::install.versions('Rcpp', version='0.12.11')" \
    && R -e "versions::install.versions('optparse', version='1.4.4')" \
    && R -e "versions::install.versions('stringr', version='1.2.0')" \
    && R -e "versions::install.versions('CodeDepends', version='0.5-3')"

COPY ./ /clipper

# Patch Clipper
RUN cd /clipper && rm -rf bin/yapf src/libs/rapidjson src/libs/redox src/libs/spdlog && git submodule update \
    && cd /clipper/src/libs/spdlog \
    && git apply ../patches/make_spdlog_compile_linux.patch


ENTRYPOINT ["/clipper/bin/ci_checks.sh"]

# vim: set filetype=dockerfile:
